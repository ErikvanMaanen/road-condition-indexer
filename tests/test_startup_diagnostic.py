#!/usr/bin/env python3
"""
Test script to check FastAPI startup issues in the Road Condition Indexer
"""
import sys
import traceback
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_imports():
    """Test all the imports from main.py"""
    print("üîç Testing imports...")
    
    try:
        import os
        print("‚úÖ os imported")
        
        from pathlib import Path
        print("‚úÖ pathlib imported")
        
        from datetime import datetime
        print("‚úÖ datetime imported")
        
        import math
        print("‚úÖ math imported")
        
        import re
        print("‚úÖ re imported")
        
        import hashlib
        print("‚úÖ hashlib imported")
        
        import pytz
        print("‚úÖ pytz imported")
        
        from scipy import signal
        print("‚úÖ scipy.signal imported")
        
        import requests
        print("‚úÖ requests imported")
        
        from fastapi import FastAPI, HTTPException, Request, Depends, Query
        print("‚úÖ FastAPI imported")
        
        from fastapi.staticfiles import StaticFiles
        print("‚úÖ FastAPI StaticFiles imported")
        
        from fastapi.responses import FileResponse, Response, RedirectResponse
        print("‚úÖ FastAPI responses imported")
        
        from pydantic import BaseModel, Field
        print("‚úÖ pydantic imported")
        
        import numpy as np
        print("‚úÖ numpy imported")
        
        from typing import Dict, List, Optional, Tuple
        print("‚úÖ typing imported")
        
        print("üéâ All basic imports successful!")
        return True
        
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        traceback.print_exc()
        return False

def test_database_import():
    """Test database module import"""
    print("\nüîç Testing database imports...")
    
    try:
        from database import (
            DatabaseManager, TABLE_BIKE_DATA, TABLE_DEBUG_LOG, TABLE_DEVICE_NICKNAMES, TABLE_ARCHIVE_LOGS,
            TABLE_USER_ACTIONS, LogLevel, LogCategory, log_info, log_warning, log_error
        )
        print("‚úÖ Database module imported successfully")
        
        from database import db_manager
        print("‚úÖ Database manager instance imported")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Database import error: {e}")
        traceback.print_exc()
        return False

def test_azure_imports():
    """Test optional Azure imports"""
    print("\nüîç Testing Azure imports...")
    
    try:
        from azure.identity import ClientSecretCredential
        from azure.mgmt.web import WebSiteManagementClient
        from azure.mgmt.sql import SqlManagementClient
        from azure.mgmt.sql.models import DatabaseUpdate, Sku
        print("‚úÖ Azure modules imported successfully")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Azure import error (this is optional): {e}")
        return False

def test_fastapi_app_creation():
    """Test FastAPI app creation"""
    print("\nüîç Testing FastAPI app creation...")
    
    try:
        from fastapi import FastAPI
        from fastapi.staticfiles import StaticFiles
        from pathlib import Path
        
        # Simulate the app creation from main.py
        BASE_DIR = Path(__file__).resolve().parent
        app = FastAPI(title="Road Condition Indexer")
        
        # Check if static directory exists
        static_dir = BASE_DIR / "static"
        if static_dir.exists():
            app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")
            print("‚úÖ Static files mounted successfully")
        else:
            print(f"‚ö†Ô∏è Static directory not found at {static_dir}")
        
        print("‚úÖ FastAPI app created successfully")
        return True
        
    except Exception as e:
        print(f"‚ùå FastAPI app creation error: {e}")
        traceback.print_exc()
        return False

def test_startup_function():
    """Test the startup function logic"""
    print("\nüîç Testing startup function logic...")
    
    try:
        # Import necessary modules
        from database import db_manager, LogCategory, log_info, log_error
        import time
        
        print("Starting simulated startup test...")
        
        # Test database connectivity
        print("Testing database connectivity...")
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        conn.close()
        print(f"‚úÖ Database test query result: {result}")
        
        # Test table initialization
        print("Testing table initialization...")
        db_manager.init_tables()
        print("‚úÖ Tables initialized successfully")
        
        print("‚úÖ Startup function logic test passed")
        return True
        
    except Exception as e:
        print(f"‚ùå Startup function test error: {e}")
        traceback.print_exc()
        return False

def main():
    """Main test function"""
    print("üöÄ Road Condition Indexer - FastAPI Startup Diagnostic\n")
    
    tests = [
        ("Basic imports", test_imports),
        ("Database imports", test_database_import),
        ("Azure imports", test_azure_imports),
        ("FastAPI app creation", test_fastapi_app_creation),
        ("Startup function", test_startup_function),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"Running: {test_name}")
        print('='*50)
        
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå Test '{test_name}' failed with exception: {e}")
            results[test_name] = False
    
    # Summary
    print(f"\n{'='*50}")
    print("SUMMARY")
    print('='*50)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name}: {status}")
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    print(f"\nOverall: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! FastAPI startup should work correctly.")
    else:
        print("‚ö†Ô∏è Some tests failed. Check the errors above for details.")

if __name__ == "__main__":
    main()
