<!-- Activity Log and Debug Messages Partial -->
<style>
    #logs {
        border: 1px solid #ccc;
        padding: 0.5rem;
        background: #f9f9f9;
    }
    #log {
        width: 100%;
        height: 150px;
        overflow: auto;
        border: 1px solid #ccc;
        margin-bottom: 1rem;
        white-space: pre;
       // Add a button to toggle logs visibility at the bottom of each page
const logsToggleButton = document.createElement('button');
logsToggleButton.id = 'toggle-logs-button';
logsToggleButton.style.cssText = 'position:fixed; bottom:80px; right:20px; background:#2196F3; color:white; border:none; border-radius:50%; width:50px; height:50px; font-size:24px; display:flex; align-items:center; justify-content:center; box-shadow:0 2px 5px rgba(0,0,0,0.3); cursor:pointer; z-index:1000;';
logsToggleButton.innerHTML = 'üóÇÔ∏è';
logsToggleButton.title = 'Hide Logs Display';ng: 0.5rem;
        background: white;
        font-family: monospace;
        font-size: 0.9rem;
    }
    #debug {
        width: 100%;
        height: 200px;
        margin-top: 0.5rem;
        font-family: monospace;
        font-size: 0.85rem;
        resize: vertical;
        border: 1px solid #ccc;
        padding: 0.5rem;
        background: white;
    }
    .log-filters {
        display: flex;
        gap: 1rem;
        margin-bottom: 0.5rem;
        align-items: center;
        flex-wrap: wrap;
    }
    .log-filters label {
        font-size: 0.9rem;
        font-weight: bold;
    }
    .log-filters select {
        padding: 0.25rem;
        border: 1px solid #ccc;
        border-radius: 3px;
        font-size: 0.85rem;
    }
    .log-filters button {
        padding: 0.25rem 0.5rem;
        background: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 3px;
        cursor: pointer;
        font-size: 0.85rem;
    }
    .log-filters button:hover {
        background: #e0e0e0;
    }
    #toggle-logs {
        padding: 0.5rem 1rem;
        background: #007cba;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    #toggle-logs:hover {
        background: #005a8b;
    }
    .log-stats {
        font-size: 0.8rem;
        color: #666;
        margin-bottom: 0.5rem;
    }
</style>

<section id="logs" style="margin-bottom:1rem; display:block;">
    <h3>Activity Log</h3>
    <div id="log"></div>
    <h3>All Messages</h3>
    <div class="log-filters">
        <label>Level:</label>
        <select id="log-level-filter">
            <option value="">All Levels</option>
            <option value="DEBUG">Debug</option>
            <option value="INFO">Info</option>
            <option value="WARNING">Warning</option>
            <option value="ERROR">Error</option>
            <option value="CRITICAL">Critical</option>
        </select>
        <label>Category:</label>
        <select id="log-category-filter">
            <option value="">All Categories</option>
            <option value="General">General</option>
            <option value="Database">Database</option>
            <option value="GPS">GPS</option>
            <option value="Motion">Motion</option>
            <option value="Network">Network</option>
            <option value="System">System</option>
        </select>
        <button onclick="clearAllMessages()">Clear</button>
        <button onclick="exportMessages()">Export</button>
    </div>
    <div class="log-stats" id="log-stats">Total: 0 messages</div>
    <textarea id="debug" readonly></textarea>
</section>
<div style="margin-bottom:1rem;">
    <button id="toggle-logs" onclick="toggleLogs()">Hide Logs</button>
</div>

<script>
// Activity Log and Debug Messages JavaScript Functions
let allLogMessages = [];
let deviceId = '';

// Initialize device ID from localStorage or generate new one
function initializeDeviceId() {
    deviceId = localStorage.getItem('deviceId') || '';
    if (!deviceId) {
        deviceId = crypto.randomUUID ? crypto.randomUUID() : 'unknown-' + Date.now();
        localStorage.setItem('deviceId', deviceId);
    }
    // Take only last 8 characters for display
    deviceId = deviceId.slice(-8);
}

// Format short date/time
function formatShortDateTime() {
    const now = new Date();
    const cesTime = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Amsterdam"}));
    const month = String(cesTime.getMonth() + 1).padStart(2, '0');
    const day = String(cesTime.getDate()).padStart(2, '0');
    const hours = String(cesTime.getHours()).padStart(2, '0');
    const minutes = String(cesTime.getMinutes()).padStart(2, '0');
    const seconds = String(cesTime.getSeconds()).padStart(2, '0');
    return `${month}/${day} ${hours}:${minutes}:${seconds}`;
}

// Add message to activity log (simple display)
function addLog(msg) {
    const div = document.getElementById('log');
    if (div) {
        const shortTime = formatShortDateTime();
        div.textContent += `${shortTime} - ${msg}\n`;
        div.scrollTop = div.scrollHeight;
    }
    // Also add to all messages with INFO level
    addMessage(msg, 'INFO', 'General');
}

// Add debug message (legacy function for compatibility)
function addDebug(msg, category = 'Debug', level = 'DEBUG') {
    addMessage(msg, level, category);
}

// Add message to all messages with full details
function addMessage(msg, level = 'INFO', category = 'General') {
    const timestamp = formatShortDateTime();
    const logEntry = {
        timestamp: timestamp,
        level: level,
        category: category,
        message: msg,
        deviceId: deviceId
    };
    
    allLogMessages.push(logEntry);
    
    // Limit to last 1000 messages to prevent memory issues
    if (allLogMessages.length > 1000) {
        allLogMessages = allLogMessages.slice(-1000);
    }
    
    updateDebugDisplay();
    updateLogStats();
}

// Update the debug textarea with filtered messages
function updateDebugDisplay() {
    const debugEl = document.getElementById('debug');
    if (!debugEl) return;
    
    const levelFilter = document.getElementById('log-level-filter')?.value || '';
    const categoryFilter = document.getElementById('log-category-filter')?.value || '';
    
    let filteredMessages = allLogMessages;
    
    if (levelFilter) {
        filteredMessages = filteredMessages.filter(msg => msg.level === levelFilter);
    }
    
    if (categoryFilter) {
        filteredMessages = filteredMessages.filter(msg => msg.category === categoryFilter);
    }
    
    const displayText = filteredMessages.map(msg => 
        `${msg.timestamp} [${msg.level}] [${msg.category}] [${msg.deviceId}] ${msg.message}`
    ).join('\n');
    
    debugEl.value = displayText;
    debugEl.scrollTop = debugEl.scrollHeight;
}

// Update log statistics
function updateLogStats() {
    const statsEl = document.getElementById('log-stats');
    if (!statsEl) return;
    
    const levelFilter = document.getElementById('log-level-filter')?.value || '';
    const categoryFilter = document.getElementById('log-category-filter')?.value || '';
    
    let filteredMessages = allLogMessages;
    
    if (levelFilter) {
        filteredMessages = filteredMessages.filter(msg => msg.level === levelFilter);
    }
    
    if (categoryFilter) {
        filteredMessages = filteredMessages.filter(msg => msg.category === categoryFilter);
    }
    
    const levelCounts = {};
    filteredMessages.forEach(msg => {
        levelCounts[msg.level] = (levelCounts[msg.level] || 0) + 1;
    });
    
    const levelStats = Object.entries(levelCounts)
        .map(([level, count]) => `${level}: ${count}`)
        .join(', ');
    
    statsEl.textContent = `Total: ${filteredMessages.length} messages${levelStats ? ' (' + levelStats + ')' : ''}`;
}

// Clear all messages
function clearAllMessages() {
    if (confirm('Clear all log messages?')) {
        allLogMessages = [];
        updateDebugDisplay();
        updateLogStats();
        
        // Also clear the simple activity log
        const logDiv = document.getElementById('log');
        if (logDiv) {
            logDiv.textContent = '';
        }
    }
}

// Export messages to file
function exportMessages() {
    if (allLogMessages.length === 0) {
        alert('No messages to export');
        return;
    }
    
    const levelFilter = document.getElementById('log-level-filter')?.value || '';
    const categoryFilter = document.getElementById('log-category-filter')?.value || '';
    
    let filteredMessages = allLogMessages;
    
    if (levelFilter) {
        filteredMessages = filteredMessages.filter(msg => msg.level === levelFilter);
    }
    
    if (categoryFilter) {
        filteredMessages = filteredMessages.filter(msg => msg.category === categoryFilter);
    }
    
    const csvContent = [
        'Timestamp,Level,Category,DeviceId,Message',
        ...filteredMessages.map(msg => 
            `"${msg.timestamp}","${msg.level}","${msg.category}","${msg.deviceId}","${msg.message.replace(/"/g, '""')}"`
        )
    ].join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    const timestamp = formatShortDateTime().replace(/[\/:\s]/g, '-');
    a.download = `log-messages-${timestamp}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
}

// Toggle logs visibility
function toggleLogs() {
    const logsSection = document.getElementById('logs');
    const toggleButton = document.getElementById('toggle-logs');
    
    if (logsSection && toggleButton) {
        if (logsSection.style.display === 'none') {
            logsSection.style.display = 'block';
            toggleButton.textContent = 'Hide Logs';
        } else {
            logsSection.style.display = 'none';
            toggleButton.textContent = 'Show Logs';
        }
    }
}

// Initialize when partial is loaded
function initializeLogs() {
    initializeDeviceId();
    
    // Add event listeners for filters
    const levelFilter = document.getElementById('log-level-filter');
    const categoryFilter = document.getElementById('log-category-filter');
    
    if (levelFilter) {
        levelFilter.addEventListener('change', () => {
            updateDebugDisplay();
            updateLogStats();
        });
    }
    
    if (categoryFilter) {
        categoryFilter.addEventListener('change', () => {
            updateDebugDisplay();
            updateLogStats();
        });
    }
    
    // Initialize display
    updateDebugDisplay();
    updateLogStats();
    
    // Add initial message
    addMessage('Logs system initialized', 'INFO', 'System');
}

// Ensure logs are properly initialized when partial is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Initialize logs if they exist
    const logsSection = document.getElementById('logs');
    if (logsSection) {
        logsSection.style.display = 'block';
        initializeLogs();
    }
});

// Initialize immediately if DOM is already loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLogs);
} else {
    initializeLogs();
}

// Add a button to toggle logs visibility at the bottom of each page
const logsToggleButton = document.createElement('button');
logsToggleButton.id = 'toggle-logs-button';
logsToggleButton.style.cssText = 'position:fixed; bottom:20px; right:20px; background:#2196F3; color:white; border:none; border-radius:50%; width:50px; height:50px; font-size:24px; display:flex; align-items:center; justify-content:center; box-shadow:0 2px 5px rgba(0,0,0,0.3); cursor:pointer; z-index:1000;';
logsToggleButton.innerHTML = 'ÔøΩÔ∏è';
logsToggleButton.title = 'Hide Logs Display';
document.body.appendChild(logsToggleButton);

// Add event listener to toggle logs visibility
logsToggleButton.addEventListener('click', function() {
    const logsSection = document.getElementById('logs');
    if (logsSection) {
        if (logsSection.style.display === 'none') {
            logsSection.style.display = 'block';
            logsToggleButton.style.background = '#2196F3';
            logsToggleButton.innerHTML = 'üóÇÔ∏è';
            logsToggleButton.title = 'Hide Logs Display';
        } else {
            logsSection.style.display = 'none';
            logsToggleButton.style.background = '#555';
            logsToggleButton.innerHTML = 'üìã';
            logsToggleButton.title = 'Show Logs Display';
        }
    }
});
</script>
